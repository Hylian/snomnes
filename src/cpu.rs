use num_traits::FromPrimitive;

struct Registers {
    a: u8,
    x: u8,
    y: u8,
    pc: u16,
    s: u8,
    p: u8,
}

impl Default for Registers {
    fn default() -> Self {
        Self {
            a: 0,
            x: 0,
            y: 0,
            pc: 0xc000,
            s: 0xfd,
            p: 0x24,
        }
    }
}

enum AddressingMode {
    Implicit,
    Accumulator,
    Immediate,
    ZeroPage,
    ZeroPageX,
    ZeroPageY,
    Relative,
    Absolute,
    AbsoluteX,
    AbsoluteY,
    Indirect,
    IndirectX,
    IndirectY,
}

#[derive(Copy, Clone, PartialEq)]
enum Instruction {
    Adc,
    And,
    Asl,
    Bcc,
    Bcs,
    Beq,
    Bit,
    Bmi,
    Bne,
    Bpl,
    Brk,
    Bvc,
    Bvs,
    Clc,
    Cld,
    Cli,
    Clv,
    Cmp,
    Cpx,
    Cpy,
    Dec,
    Dex,
    Dey,
    Eor,
    Inc,
    Inx,
    Iny,
    Jmp,
    Jsr,
    Lda,
    Ldx,
    Ldy,
    Lsr,
    Nop,
    Ora,
    Pha,
    Php,
    Pla,
    Plp,
    Rol,
    Ror,
    Rti,
    Rts,
    Sbc,
    Sec,
    Sed,
    Sei,
    Sta,
    Stx,
    Sty,
    Tax,
    Tay,
    Tsx,
    Txa,
    Txs,
    Tya,
}

fn decode(opcode: u8) -> (Instruction, AddressingMode) {
    match opcode {
        0x69 => (Instruction::Adc, AddressingMode::Immediate),
        0x65 => (Instruction::Adc, AddressingMode::ZeroPage),
        0x75 => (Instruction::Adc, AddressingMode::ZeroPageX),
        0x6D => (Instruction::Adc, AddressingMode::Absolute),
        0x7D => (Instruction::Adc, AddressingMode::AbsoluteX),
        0x79 => (Instruction::Adc, AddressingMode::AbsoluteY),
        0x61 => (Instruction::Adc, AddressingMode::IndirectX),
        0x71 => (Instruction::Adc, AddressingMode::IndirectY),
        0x0A => (Instruction::Adc, AddressingMode::Accumulator),
        0x06 => (Instruction::Adc, AddressingMode::ZeroPage),
        0x16 => (Instruction::Adc, AddressingMode::ZeroPageX),
        0x0E => (Instruction::Adc, AddressingMode::Absolute),
        0x1E => (Instruction::Adc, AddressingMode::AbsoluteX),
        0x90 => (Instruction::Bcc, AddressingMode::Relative),
        0xB0 => (Instruction::Bcs, AddressingMode::Relative),
        0xF0 => (Instruction::Beq, AddressingMode::Relative),
        0x24 => (Instruction::Bit, AddressingMode::ZeroPage),
        0x2C => (Instruction::Bit, AddressingMode::Absolute),
        0x30 => (Instruction::Bmi, AddressingMode::Relative),
        0xD0 => (Instruction::Bne, AddressingMode::Relative),
        0x10 => (Instruction::Bpl, AddressingMode::Relative),
        0x00 => (Instruction::Brk, AddressingMode::Implicit),
        0x50 => (Instruction::Bvc, AddressingMode::Relative),
        0x70 => (Instruction::Bvs, AddressingMode::Relative),
        0x18 => (Instruction::Clc, AddressingMode::Implicit),
        0xD8 => (Instruction::Cld, AddressingMode::Implicit),
        0x58 => (Instruction::Cli, AddressingMode::Implicit),
        0xB8 => (Instruction::Clv, AddressingMode::Implicit),
        0xC9 => (Instruction::Cmp, AddressingMode::Immediate),
        0xC5 => (Instruction::Cmp, AddressingMode::ZeroPage),
        0xD5 => (Instruction::Cmp, AddressingMode::ZeroPageX),
        0xCD => (Instruction::Cmp, AddressingMode::Absolute),
        0xDD => (Instruction::Cmp, AddressingMode::AbsoluteX),
        0xD9 => (Instruction::Cmp, AddressingMode::AbsoluteY),
        0xC1 => (Instruction::Cmp, AddressingMode::IndirectX),
        0xD1 => (Instruction::Cmp, AddressingMode::IndirectY),
        0xE0 => (Instruction::Cpx, AddressingMode::Immediate),
        0xE4 => (Instruction::Cpx, AddressingMode::ZeroPage),
        0xEC => (Instruction::Cpx, AddressingMode::Absolute),
        0xC0 => (Instruction::Cpy, AddressingMode::Immediate),
        0xC4 => (Instruction::Cpy, AddressingMode::ZeroPage),
        0xCC => (Instruction::Cpy, AddressingMode::Absolute),
        0xC6 => (Instruction::Dec, AddressingMode::ZeroPage),
        0xD6 => (Instruction::Dec, AddressingMode::ZeroPageX),
        0xCE => (Instruction::Dec, AddressingMode::Absolute),
        0xDE => (Instruction::Dec, AddressingMode::AbsoluteX),
        0xCA => (Instruction::Dex, AddressingMode::Implicit),
        0x88 => (Instruction::Dey, AddressingMode::Implicit),
        0x49 => (Instruction::Eor, AddressingMode::Immediate),
        0x45 => (Instruction::Eor, AddressingMode::ZeroPage),
        0x55 => (Instruction::Eor, AddressingMode::ZeroPageX),
        0x4D => (Instruction::Eor, AddressingMode::Absolute),
        0x5D => (Instruction::Eor, AddressingMode::AbsoluteX),
        0x59 => (Instruction::Eor, AddressingMode::AbsoluteY),
        0x41 => (Instruction::Eor, AddressingMode::IndirectX),
        0x51 => (Instruction::Eor, AddressingMode::IndirectY),
        0xE6 => (Instruction::Inc, AddressingMode::ZeroPage),
        0xF6 => (Instruction::Inc, AddressingMode::ZeroPageX),
        0xEE => (Instruction::Inc, AddressingMode::Absolute),
        0xFE => (Instruction::Inc, AddressingMode::AbsoluteX),
        0xE8 => (Instruction::Inx, AddressingMode::Implicit),
        0xC8 => (Instruction::Iny, AddressingMode::Implicit),
        0x4C => (Instruction::Jmp, AddressingMode::Absolute),
        0x6C => (Instruction::Jmp, AddressingMode::Indirect),
        0x20 => (Instruction::Jsr, AddressingMode::Absolute),
        0xA9 => (Instruction::Lda, AddressingMode::Immediate),
        0xA5 => (Instruction::Lda, AddressingMode::ZeroPage),
        0xB5 => (Instruction::Lda, AddressingMode::ZeroPageX),
        0xAD => (Instruction::Lda, AddressingMode::Absolute),
        0xBD => (Instruction::Lda, AddressingMode::AbsoluteX),
        0xB9 => (Instruction::Lda, AddressingMode::AbsoluteY),
        0xA1 => (Instruction::Lda, AddressingMode::IndirectX),
        0xB1 => (Instruction::Lda, AddressingMode::IndirectY),
        0xA2 => (Instruction::Ldx, AddressingMode::Immediate),
        0xA6 => (Instruction::Ldx, AddressingMode::ZeroPage),
        0xB6 => (Instruction::Ldx, AddressingMode::ZeroPageY),
        0xAE => (Instruction::Ldx, AddressingMode::Absolute),
        0xBE => (Instruction::Ldx, AddressingMode::AbsoluteY),
        0xA0 => (Instruction::Ldy, AddressingMode::Immediate),
        0xA4 => (Instruction::Ldy, AddressingMode::ZeroPage),
        0xB4 => (Instruction::Ldy, AddressingMode::ZeroPageX),
        0xAC => (Instruction::Ldy, AddressingMode::Absolute),
        0xBC => (Instruction::Ldy, AddressingMode::AbsoluteX),
        0x4A => (Instruction::Lsr, AddressingMode::Accumulator),
        0x46 => (Instruction::Lsr, AddressingMode::ZeroPage),
        0x56 => (Instruction::Lsr, AddressingMode::ZeroPageX),
        0x4E => (Instruction::Lsr, AddressingMode::Absolute),
        0x5E => (Instruction::Lsr, AddressingMode::AbsoluteX),
        0xEA => (Instruction::Nop, AddressingMode::Implicit),
        0x09 => (Instruction::Ora, AddressingMode::Immediate),
        0x05 => (Instruction::Ora, AddressingMode::ZeroPage),
        0x15 => (Instruction::Ora, AddressingMode::ZeroPageX),
        0x0D => (Instruction::Ora, AddressingMode::Absolute),
        0x1D => (Instruction::Ora, AddressingMode::AbsoluteX),
        0x19 => (Instruction::Ora, AddressingMode::AbsoluteY),
        0x01 => (Instruction::Ora, AddressingMode::IndirectX),
        0x11 => (Instruction::Ora, AddressingMode::IndirectY),
        0x48 => (Instruction::Pha, AddressingMode::Implicit),
        0x08 => (Instruction::Php, AddressingMode::Implicit),
        0x68 => (Instruction::Pla, AddressingMode::Implicit),
        0x28 => (Instruction::Plp, AddressingMode::Implicit),
        0x2A => (Instruction::Rol, AddressingMode::Accumulator),
        0x26 => (Instruction::Rol, AddressingMode::ZeroPage),
        0x36 => (Instruction::Rol, AddressingMode::ZeroPageX),
        0x2E => (Instruction::Rol, AddressingMode::Absolute),
        0x3E => (Instruction::Rol, AddressingMode::AbsoluteX),
        0x6A => (Instruction::Ror, AddressingMode::Accumulator),
        0x66 => (Instruction::Ror, AddressingMode::ZeroPage),
        0x76 => (Instruction::Ror, AddressingMode::ZeroPageX),
        0x6E => (Instruction::Ror, AddressingMode::Absolute),
        0x7E => (Instruction::Ror, AddressingMode::AbsoluteX),
        0x40 => (Instruction::Rti, AddressingMode::Implicit),
        0x60 => (Instruction::Rts, AddressingMode::Implicit),
        0xE9 => (Instruction::Sbc, AddressingMode::Immediate),
        0xE5 => (Instruction::Sbc, AddressingMode::ZeroPage),
        0xF5 => (Instruction::Sbc, AddressingMode::ZeroPageX),
        0xED => (Instruction::Sbc, AddressingMode::Absolute),
        0xFD => (Instruction::Sbc, AddressingMode::AbsoluteX),
        0xF9 => (Instruction::Sbc, AddressingMode::AbsoluteY),
        0xE1 => (Instruction::Sbc, AddressingMode::IndirectX),
        0xF1 => (Instruction::Sbc, AddressingMode::IndirectY),
        0x38 => (Instruction::Sec, AddressingMode::Implicit),
        0xF8 => (Instruction::Sed, AddressingMode::Implicit),
        0x78 => (Instruction::Sei, AddressingMode::Implicit),
        0x85 => (Instruction::Sta, AddressingMode::ZeroPage),
        0x95 => (Instruction::Sta, AddressingMode::ZeroPageX),
        0x8D => (Instruction::Sta, AddressingMode::Absolute),
        0x9D => (Instruction::Sta, AddressingMode::AbsoluteX),
        0x99 => (Instruction::Sta, AddressingMode::AbsoluteY),
        0x81 => (Instruction::Sta, AddressingMode::IndirectX),
        0x91 => (Instruction::Sta, AddressingMode::IndirectY),
        0x86 => (Instruction::Stx, AddressingMode::ZeroPage),
        0x96 => (Instruction::Stx, AddressingMode::ZeroPageY),
        0x8E => (Instruction::Stx, AddressingMode::Absolute),
        0x84 => (Instruction::Sty, AddressingMode::ZeroPage),
        0x94 => (Instruction::Sty, AddressingMode::ZeroPageX),
        0x8C => (Instruction::Sty, AddressingMode::Absolute),
        0xAA => (Instruction::Tax, AddressingMode::Implicit),
        0xA8 => (Instruction::Tay, AddressingMode::Implicit),
        0xBA => (Instruction::Tsx, AddressingMode::Implicit),
        0x8A => (Instruction::Txa, AddressingMode::Implicit),
        0x9A => (Instruction::Txs, AddressingMode::Implicit),
        0x98 => (Instruction::Tya, AddressingMode::Implicit),
        _ => (Instruction::Nop, AddressingMode::Implicit),
    }
}

#[test]
fn testme() {
    assert!(OpCode::from_u8(0x69).unwrap() == OpCode::AdcImm);
}
